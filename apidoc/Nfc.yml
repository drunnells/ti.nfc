---
name: Modules.Nfc
summary: |
    A cross-platform Near-Field-Communication (NFC) module for iOS and Android. 
    Download the latest release via [Github](https://github.com/appcelerator-modules/ti.nfc/releases).
description: |
    This module provides access to Near Field Communication (NFC) functionality, 
    allowing applications to read and write (Android-only) NFC tags. 
    A "tag" may actually be another device that appears as a tag.

    ### NFC Resources

    - **Android**
      - [Near Field Communication](http://developer.android.com/guide/topics/connectivity/nfc/index.html)
      - [android.nfc](http://developer.android.com/reference/android/nfc/package-summary.html)
    - **iOS**
      - [CoreNFC](https://developer.apple.com/documentation/corenfc)
      - [Introduction to CoreNFC at WWDC17](https://developer.apple.com/videos/play/wwdc2017/718/)
      - [Native example](https://github.com/hansemannn/iOS11-NFC-Example)

    ### Requirements

    - **Android**
      - Android 4.1 (API 16) and later
      - An NFC capable device
    
    - **iOS**
      - iOS 11 and later
      - iPhone 7 / iPhone 7 Plus and later

    ### Getting Started

    -   View the [Using Titanium Modules](http://docs.appcelerator.com/platform/latest/#!/guide/Using_Titanium_Modules) 
        document for instructions on getting started with using this module in your application.
        
    ### Configure iOS: Capabilities and Provisioning Profiles
    
    -   Required capabilities:

        ``` xml
        <key>com.apple.developer.nfc.readersession.formats</key>
        <array>
            <string>NDEF</string>
        </array>
        ```

    -   Provisioning Profile entitled with the NFC Tag Reading capability

    ### Configure Android: Tag Dispatching and Intent Filters

    -   The Android [tag dispatch system](http://developer.android.com/guide/topics/connectivity/nfc/nfc.html#tag-dispatch)
        is responsible for dispatching NFC messages to the appropriate application. In the
        situation where you are not using foreground dispatching, you will need to define intent-filters in the 
        tiapp.xml file to specify which types of NFC messages the application wants to receive. By using intent-filters in
        the tiapp.xml file, the application will be automatically started if a matching
        NFC message is dispatched. 
  
        Add code similar to the following to your tiapp.xml file:

        - Replace occurrences of the activity name (`Tagviewer`) with your activity name.
        - Add the NFC permissions to your Android configuration
        - Replace the NFC specific intent filters with filters appropriate for your application.
  
            ``` xml
            <android xmlns:android="http://schemas.android.com/apk/res/android">
                <manifest>
                    <!-- Required NFC permissions -->
                    <uses-permission android:name="android.permission.NFC" />
                    <uses-feature android:name="android.hardware.nfc" android:required="true" /> 
                    
                    <!-- NFC Intent filters -->
                    <application>
                        <activity android:name=".TagviewerActivity"
                          android:label="TagViewer" android:theme="@style/Theme.Titanium"
                          android:configChanges="keyboardHidden|orientation"
                          android:exported="true">
                            <intent-filter>
                                <action android:name="android.nfc.action.TECH_DISCOVERED"/>
                                <category android:name="android.intent.category.DEFAULT"/>
                            </intent-filter>

                            <intent-filter>
                                <action android:name="android.nfc.action.NDEF_DISCOVERED"/>
                                <category android:name="android.intent.category.DEFAULT"/>
                                <data android:mimeType="text/plain" />
                            </intent-filter>

                            <intent-filter>
                                <action android:name="android.nfc.action.TAG_DISCOVERED"/>
                                <category android:name="android.intent.category.DEFAULT"/>
                            </intent-filter>
                        </activity>
                    </application>
                </manifest>
            </android>
            ```

        Note that if you are using [foreground dispatching](http://developer.android.com/guide/topics/connectivity/nfc/advanced-nfc.html#foreground-dispatch)
        you do not need to define intent filters in the application's tiapp.xml file.

    ### Accessing the Module

    -   Use `require` to access this module from JavaScript:

        ``` javascript
        var nfc = require('ti.nfc');
        ```

        The `nfc` variable is a reference to the Module object.

    ### Creating an Adapter

    -   The NFC adapter gives you access to the features of the NFC device. The NFC adapter proxy is always
        associated with the activity that was the current activity when it was created. Therefore, the NFC 
        Adapter should be created after the activity has been opened. You can use the window `open` event to know
        when the activity has been opened. 

        ``` javascript
        $.index.addEventListener('open', function(e) {
            nfcAdapter = nfc.createNfcAdapter({
                onNdefDiscovered: handleDiscovery,
                onTagDiscovered: handleDiscovery, // Android-only
                onTechDiscovered: handleDiscovery // Android-only
            });

            if (!nfcAdapter.isEnabled()) {
                Ti.API.error('NFC is not enabled on this device!');
                return;
            }
        });
        ```

    ### Handling Intents (Android)

    -   NFC Intents are dispatched to an activity by the Android tag dispatch system. When your activity receives a new intent,
        it must forward the intent to the `onNewIntent` method of the NFC adapter for processing.

        ``` javascript
        Ti.Android.currentActivity.addEventListener('newintent', function (e) {
            nfcAdapter.onNewIntent(e.intent);
        });
        ```

        If your application is started as the result of an NFC intent, that intent will automatically be processed when the
        NFC module is loaded.

    ### Foreground Dispatch

    -   The foreground dispatch system allows an activity to intercept an intent and claim priority over other activities that handle the same intent.
        When using foreground dispatching, you must process the `pause` and `resume` events on the activity and enable or disable
        foreground dispatching.

        ``` javascript
        var currentActivity = Ti.Android.currentActivity;

        currentActivity.addEventListener('resume', function(e) {
            nfcAdapter.enableForegroundDispatch(dispatchFilter);
        });
        currentActivity.addEventListener('pause', function(e) {
            nfcAdapter.disableForegroundDispatch();
        });
        ```

    ### Example applications

    -   Android example applications are located in the `example/android` folder of the module:

        - `TagBeam` demonstrates how to use Android Beam to send messages to another NFC capable device.
        - `TagForeground` demonstrates how to read NFC tags only when the application is in the foreground.
        - `TagViewer` demonstrates how to receive NFC tag intents even when the application is not running.
        - `TagWriter` demonstrates how to write to an NFC tag using the Ndef tag technology data format.
        
    -   iOS example applications are located in the `example/ios` folder of the module:
        
        - `TagViewer` demonstrates how to receive NFC tags even when the application is running.

extends: Titanium.Module
since: {android: "1.0.0", iphone: "2.0.0"}
osver: {ios: {min: "11.0"}, android: {min: "4.0"}}
platforms: [android, iphone]
excludes:
    methods: [addEventListener, fireEvent, removeEventListener, applyProperties]
    properties: [bubbleParent]
properties:
  - name: ACTION_NDEF_DISCOVERED
    summary: |
        Intent to start an activity when a tag with NDEF payload is discovered.
    type: String
    permission: read-only
    since: "1.0.0"
    platforms: [android]

  - name: ACTION_TAG_DISCOVERED
    summary: |
        Intent to start an activity when a tag is discovered.
    type: String
    permission: read-only
    since: "1.0.0"
    platforms: [android]

  - name: ACTION_TECH_DISCOVERED
    summary: |
        Intent to start an activity when a tag is discovered and activities are registered for the specific technologies on the tag.
    type: String
    permission: read-only
    since: "1.0.0"
    platforms: [android]

  - name: TNF_ABSOLUTE_URI
    summary: |
        Used with ndefRecord records.
        Indicates the type field contains an absolute-URI BNF construct defined by RFC 3986.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_EMPTY
    summary: |
        Used with ndefRecord records.
        Indicates the record is empty.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_EXTERNAL_TYPE
    summary: |
        Used with ndefRecord records.
        Indicates the type field contains an external type name.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_MIME_MEDIA
    summary: |
        Used with ndefRecord records.    
        Indicates the type field contains a media-type BNF construct, defined by RFC 2046.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_UNCHANGED
    summary: |
        Used with ndefRecord records.    
        Indicates the payload is an intermediate or final chunk of a chunked NDEF Record.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_UNKNOWN
    summary: |
        Used with ndefRecord records.    
        Indicates the payload type is unknown.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: TNF_WELL_KNOWN
    summary: |
        Used with ndefRecord records.    
        Indicates the type field contains a well-known RTD type name.
    type: Number
    permission: read-only
    since: {android: "1.0.0", iphone: "2.0.0"}
    platforms: [android, iphone]

  - name: RTD_ALTERNATIVE_CARRIER
    summary: |
        Used with ndefRecord records.    
        RTD Alternative Carrier type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"     
    platforms: [android]

  - name: RTD_HANDOVER_CARRIER
    summary: |
        Used with ndefRecord records.    
        RTD Handover Carrier type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"     
    platforms: [android]

  - name: RTD_HANDOVER_REQUEST
    summary: |
        Used with ndefRecord records.    
        RTD Handover Request type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RTD_HANDOVER_SELECT
    summary: |
        Used with ndefRecord records.    
        RTD Handover Select type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RTD_SMART_POSTER
    summary: |
        Used with ndefRecord records.    
        RTD Smart Poster type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RTD_TEXT
    summary: |
        Used with ndefRecord records.    
        RTD Text type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"
    platforms: [android]

  - name: RTD_URI
    summary: |
        Used with ndefRecord records.    
        RTD URI type. For use with TNF_WELL_KNOWN.
    type: String
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_ISODEP
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_MIFARE_CLASSIC
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_MIFARE_ULTRALIGHT
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NDEF
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NDEFFORMATABLE
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NFCA
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NFCB
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NFCF
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TECH_NFCV
    summary: |
        Available tag technology used with getTechList and AdapterProxy.
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: ENCODING_UTF8
    summary: |
        Used with ndefRecord records.    
        Indicates UTF-8 text encoding.
    type: String
    permission: read-only
    since: "1.0.0"         
    platforms: [android]

  - name: ENCODING_UTF16
    summary: |
        Used with ndefRecord records.    
        Indicates UTF-16 text encoding.
    type: String
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RECOMMENDED_ACTION_UNKNOWN
    summary: |
        Used with NdefSmartPoster records (RTD_SMART_POSTER).
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RECOMMENDED_ACTION_DO_ACTION
    summary: |
        Used with NdefSmartPoster records (RTD_SMART_POSTER).
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RECOMMENDED_ACTION_SAVE_FOR_LATER
    summary: |
        Used with NdefSmartPoster records (RTD_SMART_POSTER).
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: RECOMMENDED_ACTION_OPEN_FOR_EDITING
    summary: |
        Used with NdefSmartPoster records (RTD_SMART_POSTER).
    type: Number
    permission: read-only
    since: "1.0.0"  
    platforms: [android]

  - name: TAG_TYPE_NFC_FORUM_TYPE_1
    summary: |
        Used with TECH_NDEF tag technology.
        NFC Forum Tag Type 1.
    type: String
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: TAG_TYPE_NFC_FORUM_TYPE_2
    summary: |
        Used with TECH_NDEF tag technology.
        NFC Forum Tag Type 2.
    type: String
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: TAG_TYPE_NFC_FORUM_TYPE_3
    summary: |
        Used with TECH_NDEF tag technology.
        NFC Forum Tag Type 3.
    type: String
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: TAG_TYPE_NFC_FORUM_TYPE_4
    summary: |
        Used with TECH_NDEF tag technology.
        NFC Forum Tag Type 4.
    type: String
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: TAG_TYPE_MIFARE_CLASSIC
    summary: |
        Used with TECH_NDEF tag technology.
        NDEF on MIFARE Classic.
    type: String
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_TAG_TYPE_CLASSIC
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        A MIFARE Classic tag.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_TAG_TYPE_PLUS
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        A MIFARE Plus tag.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_TAG_TYPE_PRO
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        A MIFARE Pro tag.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_TAG_TYPE_UNKNOWN
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        A MIFARE Classic compatible card of unknown type.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_BLOCK_SIZE
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        Size of a MIFARE CLassic block (in bytes).
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_SIZE_1K
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        Tag contains 16 sectors, each with 4 blocks.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_SIZE_2K
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        Tag contains 32 sectors, each with 4 blocks.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_SIZE_4K
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        Tag contains 40 sectors.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_SIZE_MINI
    summary: |
        Used with TECH_MIFARE_CLASSIC tag technology.
        Tag contains 5 sectors, each with 4 blocks.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_ULTRALIGHT_PAGE_SIZE
    summary: |
        Used with TECH_MIFARE_ULTRALIGHT tag technology.
        Size of a MIFARE Ultralight page (in bytes).
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_ULTRALIGHT_TYPE_ULTRALIGHT
    summary: |
        Used with TECH_MIFARE_ULTRALIGHT tag technology.
        A MIFARE Ultralight tag.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_ULTRALIGHT_TYPE_ULTRALIGHT_C
    summary: |
        Used with TECH_MIFARE_ULTRALIGHT tag technology.
        A MIFARE Ultralight C tag.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]

  - name: MIFARE_ULTRALIGHT_TYPE_UNKNOWN
    summary: |
        Used with TECH_MIFARE_ULTRALIGHT tag technology.
        A MIFARE Ultralight compatible tag of unknown type.
    type: Number
    permission: read-only
    since: "1.1.0"
    platforms: [android]
    
  - name: INVALIDATION_ERROR_USER_CANCELED
    summary: The user canceled the reader session.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: INVALIDATION_ERROR_SESSION_TIMEOUT
    summary: The reader session timed out.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: INVALIDATION_ERROR_SESSION_TERMINATED_UNEXPECTEDLY
    summary: The reader session terminated unexpectedly.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: INVALIDATION_ERROR_SYSTEM_IS_BUSY
    summary: The reader session failed because the system is busy.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: INVALIDATION_ERROR_FIRST_NDEF_TAG_READ
    summary: The first NDEF tag read by this session is invalid.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: ERROR_UNSUPPORTED_FEATURE
    summary: The reader session does not support this feature.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: ERROR_SECURITY_VIOLATION
    summary: A security violation associated with the reader session has occurred.    
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: TRANSCEIVE_ERROR_TAG_CONNECTION_LOST
    summary: Connection to the tag has been lost.      
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: TRANSCEIVE_ERROR_RETRY_EXCEEDED
    summary: Too many retries have occurred.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: TRANSCEIVE_ERROR_TAG_RESPONSE_ERROR
    summary: The tag has responded with an error.
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]
    
  - name: COMMAND_CONFIGURATION_ERROR_INVALID_PARAMETERS
    summary: The tag has been configured with invalid parameters.        
    type: Number
    permission: read-only
    since: "2.0.0"
    platforms: [iphone]

examples:
  - title: Creating NFC Adapter (iOS & Android)
    example: |
        This example demonstrates the proper technique for creating an NFC adapter. 
        The NFC Adapter should be created after the window has been opened.

        ``` javascript
        var nfc = require('ti.nfc');
        var nfcAdapter = null;

        $.index.addEventListener('open', function(e) {
            // Must wait until the activity has been opened before setting up NFC
            // Create the NFC adapter to be associated with this activity. 
            // There should only be ONE adapter created per activity.
            nfcAdapter = nfc.createNfcAdapter({
                onNdefDiscovered: handleDiscovery,
                onTagDiscovered: handleDiscovery, // Android-only
                onTechDiscovered: handleDiscovery // Android-only
            });

            // It's possible that the device does not support NFC. Check it here
            // before we go any further. For iOS, right now this is decided 
            // internally by the system. 
            if (OS_ANDROID) {
                if (!nfcAdapter.isEnabled()) {
                    alert('NFC is not enabled on this device');
                    return;
                }
                Ti.Android.currentActivity.addEventListener('newintent', function (e) {
                    nfcAdapter.onNewIntent(e.intent);
                });
                
            // iOS needs to be told to scan
            } else if (OS_IOS) {
                nfcAdapter.begin();
            }
        });
        
        function handleDiscovery(e) {
            alert(JSON.stringify(e, null, 2));
        }

        $.index.open();
        ```
